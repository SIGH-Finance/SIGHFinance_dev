// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class SIGH_Instrument extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SIGH_Instrument entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SIGH_Instrument entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SIGH_Instrument", id.toString(), this);
  }

  static load(id: string): SIGH_Instrument | null {
    return store.get("SIGH_Instrument", id) as SIGH_Instrument | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get totalSupplyETH(): BigDecimal {
    let value = this.get("totalSupplyETH");
    return value.toBigDecimal();
  }

  set totalSupplyETH(value: BigDecimal) {
    this.set("totalSupplyETH", Value.fromBigDecimal(value));
  }

  get recentSIGHBurnt(): BigInt {
    let value = this.get("recentSIGHBurnt");
    return value.toBigInt();
  }

  set recentSIGHBurnt(value: BigInt) {
    this.set("recentSIGHBurnt", Value.fromBigInt(value));
  }

  get recentSIGHBurntETH(): BigDecimal {
    let value = this.get("recentSIGHBurntETH");
    return value.toBigDecimal();
  }

  set recentSIGHBurntETH(value: BigDecimal) {
    this.set("recentSIGHBurntETH", Value.fromBigDecimal(value));
  }

  get totalSIGHBurnt(): BigInt {
    let value = this.get("totalSIGHBurnt");
    return value.toBigInt();
  }

  set totalSIGHBurnt(value: BigInt) {
    this.set("totalSIGHBurnt", Value.fromBigInt(value));
  }

  get totalSIGHBurntETH(): BigDecimal {
    let value = this.get("totalSIGHBurntETH");
    return value.toBigDecimal();
  }

  set totalSIGHBurntETH(value: BigDecimal) {
    this.set("totalSIGHBurntETH", Value.fromBigDecimal(value));
  }

  get currentCycle(): BigInt {
    let value = this.get("currentCycle");
    return value.toBigInt();
  }

  set currentCycle(value: BigInt) {
    this.set("currentCycle", Value.fromBigInt(value));
  }

  get currentSchedule(): BigInt {
    let value = this.get("currentSchedule");
    return value.toBigInt();
  }

  set currentSchedule(value: BigInt) {
    this.set("currentSchedule", Value.fromBigInt(value));
  }

  get currentInflation(): BigDecimal {
    let value = this.get("currentInflation");
    return value.toBigDecimal();
  }

  set currentInflation(value: BigDecimal) {
    this.set("currentInflation", Value.fromBigDecimal(value));
  }

  get currentMintSpeed(): BigInt {
    let value = this.get("currentMintSpeed");
    return value.toBigInt();
  }

  set currentMintSpeed(value: BigInt) {
    this.set("currentMintSpeed", Value.fromBigInt(value));
  }

  get currentMintSpeedETH(): BigDecimal {
    let value = this.get("currentMintSpeedETH");
    return value.toBigDecimal();
  }

  set currentMintSpeedETH(value: BigDecimal) {
    this.set("currentMintSpeedETH", Value.fromBigDecimal(value));
  }

  get currentBurnSpeed(): BigInt {
    let value = this.get("currentBurnSpeed");
    return value.toBigInt();
  }

  set currentBurnSpeed(value: BigInt) {
    this.set("currentBurnSpeed", Value.fromBigInt(value));
  }

  get currentBurnSpeedETH(): BigDecimal {
    let value = this.get("currentBurnSpeedETH");
    return value.toBigDecimal();
  }

  set currentBurnSpeedETH(value: BigDecimal) {
    this.set("currentBurnSpeedETH", Value.fromBigDecimal(value));
  }

  get treasury(): Bytes {
    let value = this.get("treasury");
    return value.toBytes();
  }

  set treasury(value: Bytes) {
    this.set("treasury", Value.fromBytes(value));
  }

  get speedController(): Bytes {
    let value = this.get("speedController");
    return value.toBytes();
  }

  set speedController(value: Bytes) {
    this.set("speedController", Value.fromBytes(value));
  }

  get mintSnapshots(): Array<string> {
    let value = this.get("mintSnapshots");
    return value.toStringArray();
  }

  set mintSnapshots(value: Array<string>) {
    this.set("mintSnapshots", Value.fromStringArray(value));
  }
}

export class MintSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MintSnapshot entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MintSnapshot entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MintSnapshot", id.toString(), this);
  }

  static load(id: string): MintSnapshot | null {
    return store.get("MintSnapshot", id) as MintSnapshot | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get cycle(): string {
    let value = this.get("cycle");
    return value.toString();
  }

  set cycle(value: string) {
    this.set("cycle", Value.fromString(value));
  }

  get schedule(): BigInt {
    let value = this.get("schedule");
    return value.toBigInt();
  }

  set schedule(value: BigInt) {
    this.set("schedule", Value.fromBigInt(value));
  }

  get inflationRate(): BigDecimal {
    let value = this.get("inflationRate");
    return value.toBigDecimal();
  }

  set inflationRate(value: BigDecimal) {
    this.set("inflationRate", Value.fromBigDecimal(value));
  }

  get mintedAmount(): BigInt {
    let value = this.get("mintedAmount");
    return value.toBigInt();
  }

  set mintedAmount(value: BigInt) {
    this.set("mintedAmount", Value.fromBigInt(value));
  }

  get mintedAmountETH(): BigDecimal {
    let value = this.get("mintedAmountETH");
    return value.toBigDecimal();
  }

  set mintedAmountETH(value: BigDecimal) {
    this.set("mintedAmountETH", Value.fromBigDecimal(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get totalSupplyETH(): BigDecimal {
    let value = this.get("totalSupplyETH");
    return value.toBigDecimal();
  }

  set totalSupplyETH(value: BigDecimal) {
    this.set("totalSupplyETH", Value.fromBigDecimal(value));
  }

  get mintSpeed(): BigInt {
    let value = this.get("mintSpeed");
    return value.toBigInt();
  }

  set mintSpeed(value: BigInt) {
    this.set("mintSpeed", Value.fromBigInt(value));
  }

  get mintSpeedETH(): BigDecimal {
    let value = this.get("mintSpeedETH");
    return value.toBigDecimal();
  }

  set mintSpeedETH(value: BigDecimal) {
    this.set("mintSpeedETH", Value.fromBigDecimal(value));
  }

  get burnSpeed(): BigInt {
    let value = this.get("burnSpeed");
    return value.toBigInt();
  }

  set burnSpeed(value: BigInt) {
    this.set("burnSpeed", Value.fromBigInt(value));
  }

  get burnSpeedETH(): BigDecimal {
    let value = this.get("burnSpeedETH");
    return value.toBigDecimal();
  }

  set burnSpeedETH(value: BigDecimal) {
    this.set("burnSpeedETH", Value.fromBigDecimal(value));
  }

  get totalSighBurnt(): BigInt {
    let value = this.get("totalSighBurnt");
    return value.toBigInt();
  }

  set totalSighBurnt(value: BigInt) {
    this.set("totalSighBurnt", Value.fromBigInt(value));
  }

  get totalSighBurntETH(): BigDecimal {
    let value = this.get("totalSighBurntETH");
    return value.toBigDecimal();
  }

  set totalSighBurntETH(value: BigDecimal) {
    this.set("totalSighBurntETH", Value.fromBigDecimal(value));
  }

  get minter(): Bytes {
    let value = this.get("minter");
    return value.toBytes();
  }

  set minter(value: Bytes) {
    this.set("minter", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }
}
