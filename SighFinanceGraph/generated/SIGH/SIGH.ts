// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ReservoirChanged extends ethereum.Event {
  get params(): ReservoirChanged__Params {
    return new ReservoirChanged__Params(this);
  }
}

export class ReservoirChanged__Params {
  _event: ReservoirChanged;

  constructor(event: ReservoirChanged) {
    this._event = event;
  }

  get prevReservoir(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newReservoir(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get blockNumber(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class coinsMinted extends ethereum.Event {
  get params(): coinsMinted__Params {
    return new coinsMinted__Params(this);
  }
}

export class coinsMinted__Params {
  _event: coinsMinted;

  constructor(event: coinsMinted) {
    this._event = event;
  }

  get cycle(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get Era(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get minter(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amountMinted(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get current_supply(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get block_number(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class SIGH extends ethereum.SmartContract {
  static bind(address: Address): SIGH {
    return new SIGH("SIGH", address);
  }

  CURRENT_SUPPLY(): BigInt {
    let result = super.call("CURRENT_SUPPLY", "CURRENT_SUPPLY():(uint256)", []);

    return result[0].toBigInt();
  }

  try_CURRENT_SUPPLY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "CURRENT_SUPPLY",
      "CURRENT_SUPPLY():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  CYCLE_SECONDS(): BigInt {
    let result = super.call("CYCLE_SECONDS", "CYCLE_SECONDS():(uint256)", []);

    return result[0].toBigInt();
  }

  try_CYCLE_SECONDS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "CYCLE_SECONDS",
      "CYCLE_SECONDS():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  Current_Cycle(): BigInt {
    let result = super.call("Current_Cycle", "Current_Cycle():(uint256)", []);

    return result[0].toBigInt();
  }

  try_Current_Cycle(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "Current_Cycle",
      "Current_Cycle():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  Current_Era(): BigInt {
    let result = super.call("Current_Era", "Current_Era():(uint256)", []);

    return result[0].toBigInt();
  }

  try_Current_Era(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("Current_Era", "Current_Era():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  FINAL_CYCLE(): BigInt {
    let result = super.call("FINAL_CYCLE", "FINAL_CYCLE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_FINAL_CYCLE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("FINAL_CYCLE", "FINAL_CYCLE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  Reservoir(): Address {
    let result = super.call("Reservoir", "Reservoir():(address)", []);

    return result[0].toAddress();
  }

  try_Reservoir(): ethereum.CallResult<Address> {
    let result = super.tryCall("Reservoir", "Reservoir():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _decimals(): i32 {
    let result = super.call("_decimals", "_decimals():(uint8)", []);

    return result[0].toI32();
  }

  try__decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("_decimals", "_decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  _name(): string {
    let result = super.call("_name", "_name():(string)", []);

    return result[0].toString();
  }

  try__name(): ethereum.CallResult<string> {
    let result = super.tryCall("_name", "_name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  _startTime(): BigInt {
    let result = super.call("_startTime", "_startTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try__startTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_startTime", "_startTime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _symbol(): string {
    let result = super.call("_symbol", "_symbol():(string)", []);

    return result[0].toString();
  }

  try__symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("_symbol", "_symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  currentDivisibilityFactor(): BigInt {
    let result = super.call(
      "currentDivisibilityFactor",
      "currentDivisibilityFactor():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_currentDivisibilityFactor(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentDivisibilityFactor",
      "currentDivisibilityFactor():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isReservoirSet(): boolean {
    let result = super.call("isReservoirSet", "isReservoirSet():(bool)", []);

    return result[0].toBoolean();
  }

  try_isReservoirSet(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isReservoirSet", "isReservoirSet():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mintingActivated(): boolean {
    let result = super.call(
      "mintingActivated",
      "mintingActivated():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_mintingActivated(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "mintingActivated",
      "mintingActivated():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  prevReservoir(): Address {
    let result = super.call("prevReservoir", "prevReservoir():(address)", []);

    return result[0].toAddress();
  }

  try_prevReservoir(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "prevReservoir",
      "prevReservoir():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  previousMintTimeStamp(): BigInt {
    let result = super.call(
      "previousMintTimeStamp",
      "previousMintTimeStamp():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_previousMintTimeStamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "previousMintTimeStamp",
      "previousMintTimeStamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  recentMinter(): Address {
    let result = super.call("recentMinter", "recentMinter():(address)", []);

    return result[0].toAddress();
  }

  try_recentMinter(): ethereum.CallResult<Address> {
    let result = super.tryCall("recentMinter", "recentMinter():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  recentlyMintedAmount(): BigInt {
    let result = super.call(
      "recentlyMintedAmount",
      "recentlyMintedAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_recentlyMintedAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "recentlyMintedAmount",
      "recentlyMintedAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  initMinting(): boolean {
    let result = super.call("initMinting", "initMinting():(bool)", []);

    return result[0].toBoolean();
  }

  try_initMinting(): ethereum.CallResult<boolean> {
    let result = super.tryCall("initMinting", "initMinting():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  start_Time(): BigInt {
    let result = super.call("start_Time", "start_Time():(uint256)", []);

    return result[0].toBigInt();
  }

  try_start_Time(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("start_Time", "start_Time():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isMintingActivated(): boolean {
    let result = super.call(
      "isMintingActivated",
      "isMintingActivated():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_isMintingActivated(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isMintingActivated",
      "isMintingActivated():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mintCoins(): boolean {
    let result = super.call("mintCoins", "mintCoins():(bool)", []);

    return result[0].toBoolean();
  }

  try_mintCoins(): ethereum.CallResult<boolean> {
    let result = super.tryCall("mintCoins", "mintCoins():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  changeReservoir(newReservoir: Address): boolean {
    let result = super.call(
      "changeReservoir",
      "changeReservoir(address):(bool)",
      [ethereum.Value.fromAddress(newReservoir)]
    );

    return result[0].toBoolean();
  }

  try_changeReservoir(newReservoir: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "changeReservoir",
      "changeReservoir(address):(bool)",
      [ethereum.Value.fromAddress(newReservoir)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getCurrentEra(): BigInt {
    let result = super.call("getCurrentEra", "getCurrentEra():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getCurrentEra(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentEra",
      "getCurrentEra():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurrentCycle(): BigInt {
    let result = super.call(
      "getCurrentCycle",
      "getCurrentCycle():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCurrentCycle(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentCycle",
      "getCurrentCycle():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRecentMinter(): Address {
    let result = super.call(
      "getRecentMinter",
      "getRecentMinter():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getRecentMinter(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRecentMinter",
      "getRecentMinter():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRecentyMintedAmount(): BigInt {
    let result = super.call(
      "getRecentyMintedAmount",
      "getRecentyMintedAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getRecentyMintedAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRecentyMintedAmount",
      "getRecentyMintedAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class InitMintingCall extends ethereum.Call {
  get inputs(): InitMintingCall__Inputs {
    return new InitMintingCall__Inputs(this);
  }

  get outputs(): InitMintingCall__Outputs {
    return new InitMintingCall__Outputs(this);
  }
}

export class InitMintingCall__Inputs {
  _call: InitMintingCall;

  constructor(call: InitMintingCall) {
    this._call = call;
  }
}

export class InitMintingCall__Outputs {
  _call: InitMintingCall;

  constructor(call: InitMintingCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class MintCoinsCall extends ethereum.Call {
  get inputs(): MintCoinsCall__Inputs {
    return new MintCoinsCall__Inputs(this);
  }

  get outputs(): MintCoinsCall__Outputs {
    return new MintCoinsCall__Outputs(this);
  }
}

export class MintCoinsCall__Inputs {
  _call: MintCoinsCall;

  constructor(call: MintCoinsCall) {
    this._call = call;
  }
}

export class MintCoinsCall__Outputs {
  _call: MintCoinsCall;

  constructor(call: MintCoinsCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ChangeReservoirCall extends ethereum.Call {
  get inputs(): ChangeReservoirCall__Inputs {
    return new ChangeReservoirCall__Inputs(this);
  }

  get outputs(): ChangeReservoirCall__Outputs {
    return new ChangeReservoirCall__Outputs(this);
  }
}

export class ChangeReservoirCall__Inputs {
  _call: ChangeReservoirCall;

  constructor(call: ChangeReservoirCall) {
    this._call = call;
  }

  get newReservoir(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeReservoirCall__Outputs {
  _call: ChangeReservoirCall;

  constructor(call: ChangeReservoirCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
