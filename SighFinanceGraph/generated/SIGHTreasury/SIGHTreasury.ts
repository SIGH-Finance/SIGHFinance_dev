// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AmountDripped extends ethereum.Event {
  get params(): AmountDripped__Params {
    return new AmountDripped__Params(this);
  }
}

export class AmountDripped__Params {
  _event: AmountDripped;

  constructor(event: AmountDripped) {
    this._event = event;
  }

  get targetAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get instrumentBeingDripped(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get currentBalance(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get AmountDripped(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get totalAmountDripped(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class DripSpeedChanged extends ethereum.Event {
  get params(): DripSpeedChanged__Params {
    return new DripSpeedChanged__Params(this);
  }
}

export class DripSpeedChanged__Params {
  _event: DripSpeedChanged;

  constructor(event: DripSpeedChanged) {
    this._event = event;
  }

  get prevDripSpeed(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get curDripSpeed(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get blockNumber(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class InstrumentDistributionInitialized extends ethereum.Event {
  get params(): InstrumentDistributionInitialized__Params {
    return new InstrumentDistributionInitialized__Params(this);
  }
}

export class InstrumentDistributionInitialized__Params {
  _event: InstrumentDistributionInitialized;

  constructor(event: InstrumentDistributionInitialized) {
    this._event = event;
  }

  get isDripAllowed(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }

  get targetAddressForDripping(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get instrumentBeingDripped(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get dripSpeed(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get initializationBlockNumber(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class InstrumentDistributionReset extends ethereum.Event {
  get params(): InstrumentDistributionReset__Params {
    return new InstrumentDistributionReset__Params(this);
  }
}

export class InstrumentDistributionReset__Params {
  _event: InstrumentDistributionReset;

  constructor(event: InstrumentDistributionReset) {
    this._event = event;
  }

  get isDripAllowed(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }

  get targetAddressForDripping(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get instrumentBeingDripped(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get dripSpeed(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get blockNumber(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class InstrumentInitialized extends ethereum.Event {
  get params(): InstrumentInitialized__Params {
    return new InstrumentInitialized__Params(this);
  }
}

export class InstrumentInitialized__Params {
  _event: InstrumentInitialized;

  constructor(event: InstrumentInitialized) {
    this._event = event;
  }

  get instrument(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get balance(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalAmountDripped(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get totalAmountTransferred(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class SIGHBurnAllowedSwitched extends ethereum.Event {
  get params(): SIGHBurnAllowedSwitched__Params {
    return new SIGHBurnAllowedSwitched__Params(this);
  }
}

export class SIGHBurnAllowedSwitched__Params {
  _event: SIGHBurnAllowedSwitched;

  constructor(event: SIGHBurnAllowedSwitched) {
    this._event = event;
  }

  get newBurnAllowed(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }

  get blockNumber(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SIGHBurnSpeedChanged extends ethereum.Event {
  get params(): SIGHBurnSpeedChanged__Params {
    return new SIGHBurnSpeedChanged__Params(this);
  }
}

export class SIGHBurnSpeedChanged__Params {
  _event: SIGHBurnSpeedChanged;

  constructor(event: SIGHBurnSpeedChanged) {
    this._event = event;
  }

  get prevSpeed(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newSpeed(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get blockNumber(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SIGHTransferred extends ethereum.Event {
  get params(): SIGHTransferred__Params {
    return new SIGHTransferred__Params(this);
  }
}

export class SIGHTransferred__Params {
  _event: SIGHTransferred;

  constructor(event: SIGHTransferred) {
    this._event = event;
  }

  get TargetAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amountTransferred(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get blockNumber(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SIGHTreasuryInitialized extends ethereum.Event {
  get params(): SIGHTreasuryInitialized__Params {
    return new SIGHTreasuryInitialized__Params(this);
  }
}

export class SIGHTreasuryInitialized__Params {
  _event: SIGHTreasuryInitialized;

  constructor(event: SIGHTreasuryInitialized) {
    this._event = event;
  }

  get msgSender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get addressesProvider(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get SIGH(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get sighDistributionHandler(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class SIGH_Burned extends ethereum.Event {
  get params(): SIGH_Burned__Params {
    return new SIGH_Burned__Params(this);
  }
}

export class SIGH_Burned__Params {
  _event: SIGH_Burned;

  constructor(event: SIGH_Burned) {
    this._event = event;
  }

  get sigh_Address(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalSIGHBurned(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get remaining_balance(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get blockNumber(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class TokenSwapTransactionData extends ethereum.Event {
  get params(): TokenSwapTransactionData__Params {
    return new TokenSwapTransactionData__Params(this);
  }
}

export class TokenSwapTransactionData__Params {
  _event: TokenSwapTransactionData;

  constructor(event: TokenSwapTransactionData) {
    this._event = event;
  }

  get data(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class TokensBought extends ethereum.Event {
  get params(): TokensBought__Params {
    return new TokensBought__Params(this);
  }
}

export class TokensBought__Params {
  _event: TokensBought;

  constructor(event: TokensBought) {
    this._event = event;
  }

  get instrument_address(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amountBought(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get new_balance(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TokensSold extends ethereum.Event {
  get params(): TokensSold__Params {
    return new TokensSold__Params(this);
  }
}

export class TokensSold__Params {
  _event: TokensSold;

  constructor(event: TokensSold) {
    this._event = event;
  }

  get instrument_address(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amountSold(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get new_balance(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class instrumentBeingDistributedChanged extends ethereum.Event {
  get params(): instrumentBeingDistributedChanged__Params {
    return new instrumentBeingDistributedChanged__Params(this);
  }
}

export class instrumentBeingDistributedChanged__Params {
  _event: instrumentBeingDistributedChanged;

  constructor(event: instrumentBeingDistributedChanged) {
    this._event = event;
  }

  get newInstrumentToBeDripped(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get blockNumber(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class maxTransferAmountUpdated extends ethereum.Event {
  get params(): maxTransferAmountUpdated__Params {
    return new maxTransferAmountUpdated__Params(this);
  }
}

export class maxTransferAmountUpdated__Params {
  _event: maxTransferAmountUpdated;

  constructor(event: maxTransferAmountUpdated) {
    this._event = event;
  }

  get prevmaxTransferLimit(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newmaxTransferLimit(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get sighBalance(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SIGHTreasury__getCurrentSIGHTransferStateResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class SIGHTreasury__getDistributionStateResult {
  value0: boolean;
  value1: Address;
  value2: Address;
  value3: BigInt;

  constructor(
    value0: boolean,
    value1: Address,
    value2: Address,
    value3: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class SIGHTreasury__getInstrumentStateResult {
  value0: boolean;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: boolean, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class SIGHTreasury__getSIGHBurnStateResult {
  value0: boolean;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: boolean, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class SIGHTreasury extends ethereum.SmartContract {
  static bind(address: Address): SIGHTreasury {
    return new SIGHTreasury("SIGHTreasury", address);
  }

  burnSIGHTokens(): BigInt {
    let result = super.call("burnSIGHTokens", "burnSIGHTokens():(uint256)", []);

    return result[0].toBigInt();
  }

  try_burnSIGHTokens(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "burnSIGHTokens",
      "burnSIGHTokens():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  changeInstrumentBeingDripped(instrumentToDrip: Address): boolean {
    let result = super.call(
      "changeInstrumentBeingDripped",
      "changeInstrumentBeingDripped(address):(bool)",
      [ethereum.Value.fromAddress(instrumentToDrip)]
    );

    return result[0].toBoolean();
  }

  try_changeInstrumentBeingDripped(
    instrumentToDrip: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "changeInstrumentBeingDripped",
      "changeInstrumentBeingDripped(address):(bool)",
      [ethereum.Value.fromAddress(instrumentToDrip)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  drip(): BigInt {
    let result = super.call("drip", "drip():(uint256)", []);

    return result[0].toBigInt();
  }

  try_drip(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("drip", "drip():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  initializeInstrumentDistribution(
    targetAddress: Address,
    instrumentToBeDistributed: Address,
    distributionSpeed: BigInt
  ): boolean {
    let result = super.call(
      "initializeInstrumentDistribution",
      "initializeInstrumentDistribution(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(targetAddress),
        ethereum.Value.fromAddress(instrumentToBeDistributed),
        ethereum.Value.fromUnsignedBigInt(distributionSpeed)
      ]
    );

    return result[0].toBoolean();
  }

  try_initializeInstrumentDistribution(
    targetAddress: Address,
    instrumentToBeDistributed: Address,
    distributionSpeed: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "initializeInstrumentDistribution",
      "initializeInstrumentDistribution(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(targetAddress),
        ethereum.Value.fromAddress(instrumentToBeDistributed),
        ethereum.Value.fromUnsignedBigInt(distributionSpeed)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  initializeInstrumentState(instrument: Address): boolean {
    let result = super.call(
      "initializeInstrumentState",
      "initializeInstrumentState(address):(bool)",
      [ethereum.Value.fromAddress(instrument)]
    );

    return result[0].toBoolean();
  }

  try_initializeInstrumentState(
    instrument: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "initializeInstrumentState",
      "initializeInstrumentState(address):(bool)",
      [ethereum.Value.fromAddress(instrument)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  refreshConfig(): boolean {
    let result = super.call("refreshConfig", "refreshConfig():(bool)", []);

    return result[0].toBoolean();
  }

  try_refreshConfig(): ethereum.CallResult<boolean> {
    let result = super.tryCall("refreshConfig", "refreshConfig():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  resetInstrumentDistribution(): boolean {
    let result = super.call(
      "resetInstrumentDistribution",
      "resetInstrumentDistribution():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_resetInstrumentDistribution(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "resetInstrumentDistribution",
      "resetInstrumentDistribution():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  switchSIGHBurnAllowed(): boolean {
    let result = super.call(
      "switchSIGHBurnAllowed",
      "switchSIGHBurnAllowed():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_switchSIGHBurnAllowed(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "switchSIGHBurnAllowed",
      "switchSIGHBurnAllowed():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferSighTo(target_: Address, amount: BigInt): BigInt {
    let result = super.call(
      "transferSighTo",
      "transferSighTo(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(target_),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_transferSighTo(
    target_: Address,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "transferSighTo",
      "transferSighTo(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(target_),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  updateDripSpeed(DripSpeed_: BigInt): boolean {
    let result = super.call(
      "updateDripSpeed",
      "updateDripSpeed(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(DripSpeed_)]
    );

    return result[0].toBoolean();
  }

  try_updateDripSpeed(DripSpeed_: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "updateDripSpeed",
      "updateDripSpeed(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(DripSpeed_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  updateInstrumentBalance(instrument_address: Address): BigInt {
    let result = super.call(
      "updateInstrumentBalance",
      "updateInstrumentBalance(address):(uint256)",
      [ethereum.Value.fromAddress(instrument_address)]
    );

    return result[0].toBigInt();
  }

  try_updateInstrumentBalance(
    instrument_address: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "updateInstrumentBalance",
      "updateInstrumentBalance(address):(uint256)",
      [ethereum.Value.fromAddress(instrument_address)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  updateSIGHBurnSpeed(newBurnSpeed: BigInt): boolean {
    let result = super.call(
      "updateSIGHBurnSpeed",
      "updateSIGHBurnSpeed(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(newBurnSpeed)]
    );

    return result[0].toBoolean();
  }

  try_updateSIGHBurnSpeed(newBurnSpeed: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "updateSIGHBurnSpeed",
      "updateSIGHBurnSpeed(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(newBurnSpeed)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  blocksRemainingForNextPeriod(): BigInt {
    let result = super.call(
      "blocksRemainingForNextPeriod",
      "blocksRemainingForNextPeriod():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_blocksRemainingForNextPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "blocksRemainingForNextPeriod",
      "blocksRemainingForNextPeriod():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAllInstruments(): Array<Address> {
    let result = super.call(
      "getAllInstruments",
      "getAllInstruments():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getAllInstruments(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getAllInstruments",
      "getAllInstruments():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getCurrentSIGHTransferState(): SIGHTreasury__getCurrentSIGHTransferStateResult {
    let result = super.call(
      "getCurrentSIGHTransferState",
      "getCurrentSIGHTransferState():(uint256,uint256)",
      []
    );

    return new SIGHTreasury__getCurrentSIGHTransferStateResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getCurrentSIGHTransferState(): ethereum.CallResult<
    SIGHTreasury__getCurrentSIGHTransferStateResult
  > {
    let result = super.tryCall(
      "getCurrentSIGHTransferState",
      "getCurrentSIGHTransferState():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SIGHTreasury__getCurrentSIGHTransferStateResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getDistributionSpeed(): BigInt {
    let result = super.call(
      "getDistributionSpeed",
      "getDistributionSpeed():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getDistributionSpeed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDistributionSpeed",
      "getDistributionSpeed():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDistributionState(): SIGHTreasury__getDistributionStateResult {
    let result = super.call(
      "getDistributionState",
      "getDistributionState():(bool,address,address,uint256)",
      []
    );

    return new SIGHTreasury__getDistributionStateResult(
      result[0].toBoolean(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toBigInt()
    );
  }

  try_getDistributionState(): ethereum.CallResult<
    SIGHTreasury__getDistributionStateResult
  > {
    let result = super.tryCall(
      "getDistributionState",
      "getDistributionState():(bool,address,address,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SIGHTreasury__getDistributionStateResult(
        value[0].toBoolean(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toBigInt()
      )
    );
  }

  getInstrumentBalance(instrument_address: Address): BigInt {
    let result = super.call(
      "getInstrumentBalance",
      "getInstrumentBalance(address):(uint256)",
      [ethereum.Value.fromAddress(instrument_address)]
    );

    return result[0].toBigInt();
  }

  try_getInstrumentBalance(
    instrument_address: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getInstrumentBalance",
      "getInstrumentBalance(address):(uint256)",
      [ethereum.Value.fromAddress(instrument_address)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getinstrumentBeingDripped(): Address {
    let result = super.call(
      "getinstrumentBeingDripped",
      "getinstrumentBeingDripped():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getinstrumentBeingDripped(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getinstrumentBeingDripped",
      "getinstrumentBeingDripped():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getInstrumentState(
    instrument: Address
  ): SIGHTreasury__getInstrumentStateResult {
    let result = super.call(
      "getInstrumentState",
      "getInstrumentState(address):(bool,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(instrument)]
    );

    return new SIGHTreasury__getInstrumentStateResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getInstrumentState(
    instrument: Address
  ): ethereum.CallResult<SIGHTreasury__getInstrumentStateResult> {
    let result = super.tryCall(
      "getInstrumentState",
      "getInstrumentState(address):(bool,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(instrument)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SIGHTreasury__getInstrumentStateResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  getSIGHBalance(): BigInt {
    let result = super.call("getSIGHBalance", "getSIGHBalance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getSIGHBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSIGHBalance",
      "getSIGHBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSIGHBurnSpeed(): BigInt {
    let result = super.call(
      "getSIGHBurnSpeed",
      "getSIGHBurnSpeed():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getSIGHBurnSpeed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSIGHBurnSpeed",
      "getSIGHBurnSpeed():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSIGHBurnState(): SIGHTreasury__getSIGHBurnStateResult {
    let result = super.call(
      "getSIGHBurnState",
      "getSIGHBurnState():(bool,uint256,uint256,uint256)",
      []
    );

    return new SIGHTreasury__getSIGHBurnStateResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getSIGHBurnState(): ethereum.CallResult<
    SIGHTreasury__getSIGHBurnStateResult
  > {
    let result = super.tryCall(
      "getSIGHBurnState",
      "getSIGHBurnState():(bool,uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SIGHTreasury__getSIGHBurnStateResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  getTargetAddressForDistribution(): Address {
    let result = super.call(
      "getTargetAddressForDistribution",
      "getTargetAddressForDistribution():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getTargetAddressForDistribution(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTargetAddressForDistribution",
      "getTargetAddressForDistribution():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTotalBurntSigh(): BigInt {
    let result = super.call(
      "getTotalBurntSigh",
      "getTotalBurntSigh():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalBurntSigh(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalBurntSigh",
      "getTotalBurntSigh():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalDrippedAmount(instrument_address: Address): BigInt {
    let result = super.call(
      "getTotalDrippedAmount",
      "getTotalDrippedAmount(address):(uint256)",
      [ethereum.Value.fromAddress(instrument_address)]
    );

    return result[0].toBigInt();
  }

  try_getTotalDrippedAmount(
    instrument_address: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalDrippedAmount",
      "getTotalDrippedAmount(address):(uint256)",
      [ethereum.Value.fromAddress(instrument_address)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalTransferredAmount(instrument_address: Address): BigInt {
    let result = super.call(
      "getTotalTransferredAmount",
      "getTotalTransferredAmount(address):(uint256)",
      [ethereum.Value.fromAddress(instrument_address)]
    );

    return result[0].toBigInt();
  }

  try_getTotalTransferredAmount(
    instrument_address: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalTransferredAmount",
      "getTotalTransferredAmount(address):(uint256)",
      [ethereum.Value.fromAddress(instrument_address)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isDistributionAllowed(): boolean {
    let result = super.call(
      "isDistributionAllowed",
      "isDistributionAllowed():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_isDistributionAllowed(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isDistributionAllowed",
      "isDistributionAllowed():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  periodLength(): BigInt {
    let result = super.call("periodLength", "periodLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_periodLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("periodLength", "periodLength():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalInstruments(): BigInt {
    let result = super.call(
      "totalInstruments",
      "totalInstruments():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalInstruments(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalInstruments",
      "totalInstruments():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class BurnSIGHTokensCall extends ethereum.Call {
  get inputs(): BurnSIGHTokensCall__Inputs {
    return new BurnSIGHTokensCall__Inputs(this);
  }

  get outputs(): BurnSIGHTokensCall__Outputs {
    return new BurnSIGHTokensCall__Outputs(this);
  }
}

export class BurnSIGHTokensCall__Inputs {
  _call: BurnSIGHTokensCall;

  constructor(call: BurnSIGHTokensCall) {
    this._call = call;
  }
}

export class BurnSIGHTokensCall__Outputs {
  _call: BurnSIGHTokensCall;

  constructor(call: BurnSIGHTokensCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ChangeInstrumentBeingDrippedCall extends ethereum.Call {
  get inputs(): ChangeInstrumentBeingDrippedCall__Inputs {
    return new ChangeInstrumentBeingDrippedCall__Inputs(this);
  }

  get outputs(): ChangeInstrumentBeingDrippedCall__Outputs {
    return new ChangeInstrumentBeingDrippedCall__Outputs(this);
  }
}

export class ChangeInstrumentBeingDrippedCall__Inputs {
  _call: ChangeInstrumentBeingDrippedCall;

  constructor(call: ChangeInstrumentBeingDrippedCall) {
    this._call = call;
  }

  get instrumentToDrip(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeInstrumentBeingDrippedCall__Outputs {
  _call: ChangeInstrumentBeingDrippedCall;

  constructor(call: ChangeInstrumentBeingDrippedCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DripCall extends ethereum.Call {
  get inputs(): DripCall__Inputs {
    return new DripCall__Inputs(this);
  }

  get outputs(): DripCall__Outputs {
    return new DripCall__Outputs(this);
  }
}

export class DripCall__Inputs {
  _call: DripCall;

  constructor(call: DripCall) {
    this._call = call;
  }
}

export class DripCall__Outputs {
  _call: DripCall;

  constructor(call: DripCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get addressesProvider_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeInstrumentDistributionCall extends ethereum.Call {
  get inputs(): InitializeInstrumentDistributionCall__Inputs {
    return new InitializeInstrumentDistributionCall__Inputs(this);
  }

  get outputs(): InitializeInstrumentDistributionCall__Outputs {
    return new InitializeInstrumentDistributionCall__Outputs(this);
  }
}

export class InitializeInstrumentDistributionCall__Inputs {
  _call: InitializeInstrumentDistributionCall;

  constructor(call: InitializeInstrumentDistributionCall) {
    this._call = call;
  }

  get targetAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get instrumentToBeDistributed(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get distributionSpeed(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class InitializeInstrumentDistributionCall__Outputs {
  _call: InitializeInstrumentDistributionCall;

  constructor(call: InitializeInstrumentDistributionCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitializeInstrumentStateCall extends ethereum.Call {
  get inputs(): InitializeInstrumentStateCall__Inputs {
    return new InitializeInstrumentStateCall__Inputs(this);
  }

  get outputs(): InitializeInstrumentStateCall__Outputs {
    return new InitializeInstrumentStateCall__Outputs(this);
  }
}

export class InitializeInstrumentStateCall__Inputs {
  _call: InitializeInstrumentStateCall;

  constructor(call: InitializeInstrumentStateCall) {
    this._call = call;
  }

  get instrument(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeInstrumentStateCall__Outputs {
  _call: InitializeInstrumentStateCall;

  constructor(call: InitializeInstrumentStateCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RefreshConfigCall extends ethereum.Call {
  get inputs(): RefreshConfigCall__Inputs {
    return new RefreshConfigCall__Inputs(this);
  }

  get outputs(): RefreshConfigCall__Outputs {
    return new RefreshConfigCall__Outputs(this);
  }
}

export class RefreshConfigCall__Inputs {
  _call: RefreshConfigCall;

  constructor(call: RefreshConfigCall) {
    this._call = call;
  }
}

export class RefreshConfigCall__Outputs {
  _call: RefreshConfigCall;

  constructor(call: RefreshConfigCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ResetInstrumentDistributionCall extends ethereum.Call {
  get inputs(): ResetInstrumentDistributionCall__Inputs {
    return new ResetInstrumentDistributionCall__Inputs(this);
  }

  get outputs(): ResetInstrumentDistributionCall__Outputs {
    return new ResetInstrumentDistributionCall__Outputs(this);
  }
}

export class ResetInstrumentDistributionCall__Inputs {
  _call: ResetInstrumentDistributionCall;

  constructor(call: ResetInstrumentDistributionCall) {
    this._call = call;
  }
}

export class ResetInstrumentDistributionCall__Outputs {
  _call: ResetInstrumentDistributionCall;

  constructor(call: ResetInstrumentDistributionCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SwapTokensUsingOxAPICall extends ethereum.Call {
  get inputs(): SwapTokensUsingOxAPICall__Inputs {
    return new SwapTokensUsingOxAPICall__Inputs(this);
  }

  get outputs(): SwapTokensUsingOxAPICall__Outputs {
    return new SwapTokensUsingOxAPICall__Outputs(this);
  }
}

export class SwapTokensUsingOxAPICall__Inputs {
  _call: SwapTokensUsingOxAPICall;

  constructor(call: SwapTokensUsingOxAPICall) {
    this._call = call;
  }

  get allowanceTarget(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get callDataHex(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get token_bought(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get token_sold(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get sellAmount(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class SwapTokensUsingOxAPICall__Outputs {
  _call: SwapTokensUsingOxAPICall;

  constructor(call: SwapTokensUsingOxAPICall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SwitchSIGHBurnAllowedCall extends ethereum.Call {
  get inputs(): SwitchSIGHBurnAllowedCall__Inputs {
    return new SwitchSIGHBurnAllowedCall__Inputs(this);
  }

  get outputs(): SwitchSIGHBurnAllowedCall__Outputs {
    return new SwitchSIGHBurnAllowedCall__Outputs(this);
  }
}

export class SwitchSIGHBurnAllowedCall__Inputs {
  _call: SwitchSIGHBurnAllowedCall;

  constructor(call: SwitchSIGHBurnAllowedCall) {
    this._call = call;
  }
}

export class SwitchSIGHBurnAllowedCall__Outputs {
  _call: SwitchSIGHBurnAllowedCall;

  constructor(call: SwitchSIGHBurnAllowedCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferSighToCall extends ethereum.Call {
  get inputs(): TransferSighToCall__Inputs {
    return new TransferSighToCall__Inputs(this);
  }

  get outputs(): TransferSighToCall__Outputs {
    return new TransferSighToCall__Outputs(this);
  }
}

export class TransferSighToCall__Inputs {
  _call: TransferSighToCall;

  constructor(call: TransferSighToCall) {
    this._call = call;
  }

  get target_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferSighToCall__Outputs {
  _call: TransferSighToCall;

  constructor(call: TransferSighToCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UpdateDripSpeedCall extends ethereum.Call {
  get inputs(): UpdateDripSpeedCall__Inputs {
    return new UpdateDripSpeedCall__Inputs(this);
  }

  get outputs(): UpdateDripSpeedCall__Outputs {
    return new UpdateDripSpeedCall__Outputs(this);
  }
}

export class UpdateDripSpeedCall__Inputs {
  _call: UpdateDripSpeedCall;

  constructor(call: UpdateDripSpeedCall) {
    this._call = call;
  }

  get DripSpeed_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateDripSpeedCall__Outputs {
  _call: UpdateDripSpeedCall;

  constructor(call: UpdateDripSpeedCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UpdateInstrumentBalanceCall extends ethereum.Call {
  get inputs(): UpdateInstrumentBalanceCall__Inputs {
    return new UpdateInstrumentBalanceCall__Inputs(this);
  }

  get outputs(): UpdateInstrumentBalanceCall__Outputs {
    return new UpdateInstrumentBalanceCall__Outputs(this);
  }
}

export class UpdateInstrumentBalanceCall__Inputs {
  _call: UpdateInstrumentBalanceCall;

  constructor(call: UpdateInstrumentBalanceCall) {
    this._call = call;
  }

  get instrument_address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateInstrumentBalanceCall__Outputs {
  _call: UpdateInstrumentBalanceCall;

  constructor(call: UpdateInstrumentBalanceCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UpdateSIGHBurnSpeedCall extends ethereum.Call {
  get inputs(): UpdateSIGHBurnSpeedCall__Inputs {
    return new UpdateSIGHBurnSpeedCall__Inputs(this);
  }

  get outputs(): UpdateSIGHBurnSpeedCall__Outputs {
    return new UpdateSIGHBurnSpeedCall__Outputs(this);
  }
}

export class UpdateSIGHBurnSpeedCall__Inputs {
  _call: UpdateSIGHBurnSpeedCall;

  constructor(call: UpdateSIGHBurnSpeedCall) {
    this._call = call;
  }

  get newBurnSpeed(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateSIGHBurnSpeedCall__Outputs {
  _call: UpdateSIGHBurnSpeedCall;

  constructor(call: UpdateSIGHBurnSpeedCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
